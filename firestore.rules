/**
 * @fileoverview Firestore Security Rules for Kart Fantasy League.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data (rosters).
 * Public data (players, league rankings) is generally readable, but write access is restricted.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Only the authenticated user can read/write their own profile.
 * - /players/{playerId}: Stores player data. Publicly readable.
 * - /users/{userId}/rosters/{rosterId}: Stores user rosters. Only the owning user can read/write.
 * - /players/{playerId}/weeklyPerformances/{weeklyPerformanceId}: Stores weekly performance data.
 * - /leagueRankings/{leagueRankingId}: Stores league rankings. Publicly readable, restricted writes.
 *
 * Key Security Decisions:
 * - Users can only create their own user document (self-registration).
 * - Users can only manage their own rosters.
 * - Player data is publicly readable.
 * - League rankings are publicly readable.
 * - Listing of user documents is disallowed for privacy.
 *
 * Denormalization for Authorization:
 * - The `/users/{userId}/rosters/{rosterId}` collection includes a `userId` field within each roster document.
 *   This denormalization avoids the need for costly `get()` calls to the parent `/users/{userId}` document
 *   when enforcing ownership in security rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to manage their own profile.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' can create their own profile document with id 'user_abc'.
     * @deny (create) - User with UID 'user_xyz' cannot create a profile document with id 'user_abc'.
     * @allow (get, update, delete) - User with UID 'user_abc' can get, update, and delete their own profile document with id 'user_abc'.
     * @deny (get, update, delete) - User with UID 'user_xyz' cannot get, update, or delete the profile document with id 'user_abc'.
     * @principle Enforces document ownership and prevents unauthorized profile access.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && resource.data.id == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read player data.
     * @path /players/{playerId}
     * @allow (get, list) - Any user can get and list player documents.
     * @deny (create, update, delete) - No one can create, update, or delete player documents.
     * @principle Allows public read access to player data.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows users to manage their own rosters.
     * @path /users/{userId}/rosters/{rosterId}
     * @allow (create) - User with UID 'user_abc' can create a roster document under /users/user_abc/rosters/roster1.
     * @deny (create) - User with UID 'user_xyz' cannot create a roster document under /users/user_abc/rosters/roster1.
     * @allow (get, update, delete) - User with UID 'user_abc' can get, update, and delete their own roster document under /users/user_abc/rosters/roster1.
     * @deny (get, update, delete) - User with UID 'user_xyz' cannot get, update, or delete the roster document under /users/user_abc/rosters/roster1.
     * @principle Enforces document ownership and prevents unauthorized roster access.
     */
    match /users/{userId}/rosters/{rosterId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows read and write access to weekly performance data.
     * @path /players/{playerId}/weeklyPerformances/{weeklyPerformanceId}
     * @allow (create, get, list, update, delete) - If the request is authenticated.
     * @principle: Authenticated access to weekly performance data.
     */
    match /players/{playerId}/weeklyPerformances/{weeklyPerformanceId} {
       function isSignedIn() {
          return request.auth != null;
        }

        allow get, list: if true;
        allow create: if isSignedIn();
        allow update: if isSignedIn() && resource != null;
        allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows public read access to league rankings.
     * @path /leagueRankings/{leagueRankingId}
     * @allow (get, list) - Any user can get and list league ranking documents.
     * @deny (create, update, delete) - No one can create, update, or delete league ranking documents.
     * @principle Allows public read access to league ranking data.
     */
    match /leagueRankings/{leagueRankingId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}