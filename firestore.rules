/**
 * @description This ruleset enforces a strict user-ownership model for user-specific data (rosters, weekly performances),
 * while allowing public read access to player and ranking data.
 *
 * Data Structure:
 * - /players/{playerId}: Public data about game players.
 * - /users/{userId}: Private user profiles.
 * - /users/{userId}/rosters/{rosterId}: User-owned rosters.
 * - /users/{userId}/rosters/{rosterId}/weeklyPerformances/{weeklyPerformanceId}: Performance data for players within a user's roster.
 * - /rankings/{rankingId}: Public ranking data.
 *
 * Key Security Decisions:
 * - Players: Players are publicly readable.
 * - Rankings: Rankings are publicly readable.
 * - Users: User profiles can only be read and written by the owning user. Listing all users is disallowed.
 * - Rosters: Rosters can only be created, read, updated, and deleted by the owning user.
 * - WeeklyPerformances: Weekly performances can only be created, read, updated, and deleted by the owning user (via roster ownership).
 * - Data consistency is enforced between the path and the document's internal 'userId' field for rosters and weekly performances during creation.
 * - Immutability of 'userId' is enforced on updates to rosters and weekly performances.
 *
 * Denormalization for Authorization:
 * - The /users/{userId}/rosters/{rosterId} collection does not denormalize the userId directly.
 * - The /users/{userId}/rosters/{rosterId}/weeklyPerformances/{weeklyPerformanceId} collection does not denormalize the userId or rosterId directly.
 *
 * Structural Segregation:
 * - Private user data (rosters, weekly performances) is stored under the /users/{userId} path, while public data (players, rankings) is stored in top-level collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows public read access to player data.
     * @path /players/{playerId}
     * @allow (get, list): Any user can read player data.
     * @deny (create, update, delete): No user can create, update, or delete player data.
     * @principle Public read access with no write access.
     */
    match /players/{playerId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Restricts access to user profiles to the owning user.
     * @path /users/{userId}
     * @allow (get): The user can read their own profile.
     * @allow (create): The user can create their own profile.
     * @allow (update): The user can update their own profile.
     * @allow (delete): The user can delete their own profile.
     * @deny (get, create, update, delete): Another user cannot access this profile.
     * @deny (list): Listing all users is disallowed.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Restricts access to user rosters to the owning user.
     * @path /users/{userId}/rosters/{rosterId}
     * @allow (get, list): The user can read and list their own rosters.
     * @allow (create): The user can create rosters under their own user ID.
     * @allow (update, delete): The user can update and delete their own rosters.
     * @deny (get, create, update, delete): Another user cannot access this roster.
     * @principle Enforces document ownership for all operations on rosters.
     */
    match /users/{userId}/rosters/{rosterId} {
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Restricts access to weekly performance data to the owning user (via roster ownership).
     * @path /users/{userId}/rosters/{rosterId}/weeklyPerformances/{weeklyPerformanceId}
     * @allow (get, list): The user can read and list weekly performance data for their rosters.
     * @allow (create): The user can create weekly performance data under their own rosters.
     * @allow (update, delete): The user can update and delete weekly performance data for their rosters.
     * @deny (get, create, update, delete): Another user cannot access this data.
     * @principle Enforces document ownership for all operations on weekly performance data.
     */
    match /users/{userId}/rosters/{rosterId}/weeklyPerformances/{weeklyPerformanceId} {
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.rosterId == rosterId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.rosterId == resource.data.rosterId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to ranking data.
     * @path /rankings/{rankingId}
     * @allow (get, list): Any user can read ranking data.
     * @deny (create, update, delete): No user can create, update, or delete ranking data.
     * @principle Public read access with no write access.
     */
    match /rankings/{rankingId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}