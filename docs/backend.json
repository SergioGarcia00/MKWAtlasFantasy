{
  "entities": {
    "Player": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Player",
      "type": "object",
      "description": "Represents a Mario Kart player with their statistics and cost.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Player entity."
        },
        "name": {
          "type": "string",
          "description": "The name of the Mario Kart player."
        },
        "speed": {
          "type": "number",
          "description": "The speed statistic of the player."
        },
        "acceleration": {
          "type": "number",
          "description": "The acceleration statistic of the player."
        },
        "handling": {
          "type": "number",
          "description": "The handling statistic of the player."
        },
        "drift": {
          "type": "number",
          "description": "The drift statistic of the player."
        },
        "cost": {
          "type": "number",
          "description": "The cost of the player in in-app currency."
        }
      },
      "required": [
        "id",
        "name",
        "speed",
        "acceleration",
        "handling",
        "drift",
        "cost"
      ]
    },
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user of the Kart Fantasy League.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the User entity."
        },
        "username": {
          "type": "string",
          "description": "The username of the user."
        },
        "currency": {
          "type": "number",
          "description": "The amount of in-app currency the user has."
        }
      },
      "required": [
        "id",
        "username",
        "currency"
      ]
    },
    "Roster": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Roster",
      "type": "object",
      "description": "Represents a user's roster of purchased players.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Roster entity."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N Roster)"
        },
        "playerIds": {
          "type": "array",
          "description": "References to Players. (Relationship: Roster 1:N Player)",
          "items": {
            "type": "string"
          }
        },
        "startingLineup": {
          "type": "array",
          "description": "References to Players in the starting lineup.",
          "items": {
            "type": "string"
          }
        },
        "bench": {
          "type": "array",
          "description": "References to Players on the bench.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "userId",
        "playerIds",
        "startingLineup",
        "bench"
      ]
    },
    "WeeklyPerformance": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "WeeklyPerformance",
      "type": "object",
      "description": "Represents a player's performance in a given week.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the WeeklyPerformance entity."
        },
        "rosterId": {
          "type": "string",
          "description": "Reference to Roster. (Relationship: Roster 1:N WeeklyPerformance)"
        },
        "playerId": {
          "type": "string",
          "description": "Reference to Player. (Relationship: Player 1:N WeeklyPerformance)"
        },
        "weekNumber": {
          "type": "number",
          "description": "The week number for which the performance is recorded."
        },
        "race1Score": {
          "type": "number",
          "description": "The score of the player in the first race of the week."
        },
        "race2Score": {
          "type": "number",
          "description": "The score of the player in the second race of the week."
        }
      },
      "required": [
        "id",
        "rosterId",
        "playerId",
        "weekNumber",
        "race1Score",
        "race2Score"
      ]
    },
    "Ranking": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Ranking",
      "type": "object",
      "description": "Represents user ranking based on weekly performance.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Ranking entity."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:1 Ranking)"
        },
        "weekNumber": {
          "type": "number",
          "description": "The week number for which the ranking is calculated."
        },
        "rank": {
          "type": "number",
          "description": "The user's rank for the specified week."
        },
        "totalScore": {
          "type": "number",
          "description": "The total score of the user for the specified week."
        }
      },
      "required": [
        "id",
        "userId",
        "weekNumber",
        "rank",
        "totalScore"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/players/{playerId}",
        "definition": {
          "entityName": "Player",
          "schema": {
            "$ref": "#/backend/entities/Player"
          },
          "description": "Stores player data. Each document represents a player with their statistics and cost.",
          "params": [
            {
              "name": "playerId",
              "description": "The unique identifier of the player."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user data. Each document represents a user with their profile information and currency balance.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/rosters/{rosterId}",
        "definition": {
          "entityName": "Roster",
          "schema": {
            "$ref": "#/backend/entities/Roster"
          },
          "description": "Stores user rosters. Each document represents a roster owned by a user, containing the IDs of players in the roster. Owned by the user, identified via the path. Includes denormalized 'userId' for authorization independence.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user who owns the roster."
            },
            {
              "name": "rosterId",
              "description": "The unique identifier of the roster."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/rosters/{rosterId}/weeklyPerformances/{weeklyPerformanceId}",
        "definition": {
          "entityName": "WeeklyPerformance",
          "schema": {
            "$ref": "#/backend/entities/WeeklyPerformance"
          },
          "description": "Stores weekly performance data for players in a roster. Each document represents a player's performance in a given week, associated with a specific roster. Includes denormalized 'userId' and 'rosterId' for authorization independence.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user who owns the roster."
            },
            {
              "name": "rosterId",
              "description": "The unique identifier of the roster."
            },
            {
              "name": "weeklyPerformanceId",
              "description": "The unique identifier of the weekly performance record."
            }
          ]
        }
      },
      {
        "path": "/rankings/{rankingId}",
        "definition": {
          "entityName": "Ranking",
          "schema": {
            "$ref": "#/backend/entities/Ranking"
          },
          "description": "Stores user ranking data based on weekly performance. Each document represents a user's ranking for a specific week.  Public access. No denormalization needed.",
          "params": [
            {
              "name": "rankingId",
              "description": "The unique identifier of the ranking record."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to ensure authorization independence, clarity, and scalability for the Kart Fantasy League application. It leverages denormalization and structural segregation to achieve these goals.\n\n*   **Authorization Independence:** The structure avoids hierarchical authorization dependencies by storing all necessary authorization data directly within each document or collection, eliminating the need for `get()` calls in security rules. This is achieved by:\n    *   Storing roles and memberships directly within documents where access control is needed.\n*   **Structural Segregation:**  Different data types with varying access needs are stored in separate collections. For example, user-owned data is stored under the `/users/{userId}` path.\n*   **Access Modeling:**  Path-based ownership (`/users/{userId}/...`) is used for user-specific data, simplifying security rules and ensuring clear ownership.\n*   **QAPs (Rules are not Filters):** The structure supports secure `list` operations by:\n    *   Enforcing consistent security requirements within each collection.\n    *   Using path-based ownership to allow users to only list resources they own.\n\nThe structure includes collections for `users`, `players`, `rosters`, `weeklyPerformances`, and `rankings`. The relationships are modeled to optimize data access and security."
  }
}