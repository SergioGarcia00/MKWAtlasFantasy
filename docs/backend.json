{
  "entities": {
    "Player": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Player",
      "type": "object",
      "description": "Represents a Mario Kart World player with their statistics and cost.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Player entity."
        },
        "name": {
          "type": "string",
          "description": "The name of the player."
        },
        "speed": {
          "type": "number",
          "description": "The speed statistic of the player."
        },
        "acceleration": {
          "type": "number",
          "description": "The acceleration statistic of the player."
        },
        "handling": {
          "type": "number",
          "description": "The handling statistic of the player."
        },
        "drift": {
          "type": "number",
          "description": "The drift statistic of the player."
        },
        "cost": {
          "type": "number",
          "description": "The cost of the player in in-app currency."
        }
      },
      "required": [
        "id",
        "name",
        "speed",
        "acceleration",
        "handling",
        "drift",
        "cost"
      ]
    },
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user of the Kart Fantasy League.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the User entity."
        },
        "username": {
          "type": "string",
          "description": "The username of the user."
        },
        "email": {
          "type": "string",
          "description": "The email address of the user.",
          "format": "email"
        },
        "currency": {
          "type": "number",
          "description": "The amount of in-app currency the user has."
        }
      },
      "required": [
        "id",
        "username",
        "email",
        "currency"
      ]
    },
    "Roster": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Roster",
      "type": "object",
      "description": "Represents a user's roster of purchased players.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Roster entity."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N Roster)"
        },
        "playerIds": {
          "type": "array",
          "description": "References to Players in the roster. (Relationship: Roster 1:N Player)",
          "items": {
            "type": "string"
          }
        },
        "startingLineup": {
          "type": "array",
          "description": "References to Players in the starting lineup. (Relationship: Roster 1:N Player)",
          "items": {
            "type": "string"
          }
        },
        "bench": {
          "type": "array",
          "description": "References to Players on the bench. (Relationship: Roster 1:N Player)",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "userId",
        "playerIds"
      ]
    },
    "WeeklyPerformance": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "WeeklyPerformance",
      "type": "object",
      "description": "Represents a player's performance in a given week.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the WeeklyPerformance entity."
        },
        "playerId": {
          "type": "string",
          "description": "Reference to Player. (Relationship: Player 1:N WeeklyPerformance)"
        },
        "weekNumber": {
          "type": "number",
          "description": "The week number for which the performance is recorded."
        },
        "race1Score": {
          "type": "number",
          "description": "The score of the player in the first race of the week."
        },
        "race2Score": {
          "type": "number",
          "description": "The score of the player in the second race of the week."
        },
        "totalScore": {
          "type": "number",
          "description": "The total score of the player for the week."
        }
      },
      "required": [
        "id",
        "playerId",
        "weekNumber",
        "race1Score",
        "race2Score",
        "totalScore"
      ]
    },
    "LeagueRanking": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "LeagueRanking",
      "type": "object",
      "description": "Represents the ranking of users in the league based on their roster performance.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the LeagueRanking entity."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N LeagueRanking)"
        },
        "weekNumber": {
          "type": "number",
          "description": "The week number for which the ranking is calculated."
        },
        "rank": {
          "type": "number",
          "description": "The rank of the user in the league for the given week."
        },
        "totalScore": {
          "type": "number",
          "description": "The total score of the user's roster for the week."
        }
      },
      "required": [
        "id",
        "userId",
        "weekNumber",
        "rank",
        "totalScore"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profile data.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            }
          ]
        }
      },
      {
        "path": "/players/{playerId}",
        "definition": {
          "entityName": "Player",
          "schema": {
            "$ref": "#/backend/entities/Player"
          },
          "description": "Stores player data.",
          "params": [
            {
              "name": "playerId",
              "description": "The unique identifier of the player."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/rosters/{rosterId}",
        "definition": {
          "entityName": "Roster",
          "schema": {
            "$ref": "#/backend/entities/Roster"
          },
          "description": "Stores user's roster information. Includes denormalized 'userId' field for authorization independence.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            },
            {
              "name": "rosterId",
              "description": "The unique identifier of the roster."
            }
          ]
        }
      },
      {
        "path": "/players/{playerId}/weeklyPerformances/{weeklyPerformanceId}",
        "definition": {
          "entityName": "WeeklyPerformance",
          "schema": {
            "$ref": "#/backend/entities/WeeklyPerformance"
          },
          "description": "Stores weekly performance data for each player.",
          "params": [
            {
              "name": "playerId",
              "description": "The unique identifier of the player."
            },
            {
              "name": "weeklyPerformanceId",
              "description": "The unique identifier of the weekly performance record."
            }
          ]
        }
      },
      {
        "path": "/leagueRankings/{leagueRankingId}",
        "definition": {
          "entityName": "LeagueRanking",
          "schema": {
            "$ref": "#/backend/entities/LeagueRanking"
          },
          "description": "Stores league ranking data.",
          "params": [
            {
              "name": "leagueRankingId",
              "description": "The unique identifier of the league ranking."
            }
          ]
        }
      }
    ],
    "reasoning": "This Firestore structure prioritizes authorization independence and efficient data retrieval for the Kart Fantasy League application. It leverages path-based ownership for user-specific data and denormalization to avoid complex security rules that rely on `get()` calls. The structure allows for secure listing of resources and is designed for debuggability.\n\n*   **Users**: User data is stored in `/users/{userId}`. This is the root for all user-specific data.\n*   **Players**: Player data is stored in `/players/{playerId}`. This collection is for storing general player information and is separate from user-specific rosters.\n*   **Rosters**: Each user has a roster stored in `/users/{userId}/rosters/{rosterId}`. This path-based ownership ensures only the user can access their rosters. The roster includes references (`playerIds`, `startingLineup`, `bench`) to `/players/{playerId}`. The roster also includes a denormalized `userId` field to support security rules.\n*   **Weekly Performances**: Weekly performance data is stored in `/players/{playerId}/weeklyPerformances/{weeklyPerformanceId}`. This allows efficient querying of a player's weekly performances.\n*   **League Rankings**: League ranking data is stored in `/leagueRankings/{leagueRankingId}`. Each document contains a `userId` field for identifying the user and `weekNumber` for ranking context.\n\n**Authorization Independence and QAPs:**\n\n*   The structure achieves Authorization Independence by using path-based ownership for user-specific data. The `userId` is explicitly included in the `/users/{userId}/rosters/{rosterId}` collection, avoiding the need to `get()` the parent user document in security rules.\n*   It supports QAPs by segregating data with different access needs into separate collections (e.g., `/players` for public player data and `/users/{userId}/rosters` for private user rosters). This allows for secure listing of players and rosters based on their respective security requirements. The league rankings collection supports listing and ordering of user ranks."
  }
}